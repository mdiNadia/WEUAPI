@page "/{culture}/LanguageEdit/{id:int}"
@inject ILanguageService _languageService
@inject NavigationManager _navigation
@inject NotificationService _notice
@inject BaseRequestParameter _baseRequestParameter
@inject IStringLocalizer<Resource> _localizer
<Form Model="@command"
      LabelColSpan="8"
      WrapperColSpan="16">
    <div class="row form-style">
    @*    @if (!string.IsNullOrEmpty(errorMessage.error))
        {
            <Alert Message="@errorMessage.error" Type="@AlertType.Error" />
        }*@
        <Input @bind-Value=@context.Id Type="hidden" />
        <div class="col-12">
            <FormItem Label="@_localizer["پرچم"]">
                <SingleFileUpload OnSetSelectedFile="OnSetSelectedFile" FileName="@context.IconName" FilePath="@(_baseRequestParameter._Base_Images_Url + "/Language/")" />
            </FormItem>

        </div>
        <div class="col-12">
            <FormItem Label="@_localizer["نام"]">
                <Input @bind-Value="@context.Name" />
            </FormItem>
        </div>
        <div class="col-12">
            <FormItem Label="@_localizer["نام کوتاه"]">
                <Input @bind-Value="@context.ShortName" />
            </FormItem>
        </div>
        <div class="col-12">
            <SingleSelect dataSource="source"
                          bindValue="@context.Direction"
                          label="@_localizer["جهت زبان"]"
                          placeHolder="@_localizer["انتخاب کنید..."]"
                          OnSetSelected="OnSetSelected" />
        </div>
        <div class="col-12 m-1">
          
                <Button class="ant-btn ant-btn-primary" HtmlType="submit" OnClick="@Edit">
                @_localizer["ثبت"]
                </Button>

                <Button class="ant-btn ant-btn-danger" Type="@ButtonType.Default" HtmlType="cancel" OnClick="()=>StateChangeAfterAction.InvokeAsync()">
                @_localizer["انصراف"]
                </Button>
         
        </div>

    </div>


</Form>




@code {
    [Parameter]
    public string culture { get; set; }
    [Parameter]
    public int id { get; set; }
    [Parameter]
    public EventCallback<bool> StateChangeAfterAction { get; set; }
    protected LanguageModels.EditLanguage command = new();
    public RestEception errorMessage = new RestEception();
    public bool error = false;
    #region Single Select
    List<DataType> source = new List<DataType>
   {
      new DataType { key = "راست به چپ", value = 0},
      new DataType { key = "چپ به راست", value = 1},
      new DataType { key = "وسط", value = 2},
   };
    protected async Task OnSetSelected(int selected)
    {
        command.Direction = selected;
    }
    #endregion
    #region Select File
    public IBrowserFile imgFile;
    protected async Task OnSetSelectedFile(IBrowserFile file)
    {
        imgFile = file;
    }
    #endregion Select File
    protected override async Task OnInitializedAsync()
    {
        var model = await _languageService.GetById(id);
        command = model.Data.Adapt<LanguageModels.EditLanguage>();
    }
    private async Task Edit()
    {
        try
        {
            var requestContent = new MultipartFormDataContent();
            requestContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");

            if (imgFile != null)
            {
                var stream = imgFile.OpenReadStream(maxAllowedSize: 512000 * 1000);
                requestContent.Add(content: new StreamContent(stream, (int)imgFile.Size), name: "iconFile", fileName: imgFile.Name);
            }
            requestContent.Add(content: new StringContent(JsonSerializer.Serialize(command.Id), Encoding.UTF8, "application/json"), name: "id");
            requestContent.Add(content: new StringContent(command.Name, Encoding.UTF8, "application/json"), name: "name");
            requestContent.Add(content: new StringContent(command.ShortName, Encoding.UTF8, "application/json"), name: "shortName");
            requestContent.Add(content: new StringContent(JsonSerializer.Serialize(command.Direction), Encoding.UTF8, "application/json"), name: "direction");
            var result = await _languageService.UpdateEntityFormFile(id, requestContent);
            if (result.StatusCode == HttpStatusCode.OK)
            {
                await _notice.Success(new NotificationConfig
                    {
                        Duration = 1.5,
                        Message = "تبریک",
                        Description = "با موفقیت ویرایش شد!",

                    });
                await StateChangeAfterAction.InvokeAsync();
            }
            else
            {
                error = true;
                string response = result.Content.ReadAsStringAsync().Result;
                errorMessage = Newtonsoft.Json.JsonConvert.DeserializeObject<RestEception>(response);
            }
        }
        catch (Exception err)
        {
            throw err;
        }
    }
}