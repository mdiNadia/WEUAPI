@page "/{culture}/ReportReasonCreate"
@using WEUPanel.Pages.ReportAdsReason;
@using WEUPanel.Pages.ReportAdsReason;

@inject IReportReasonService _reportReasonService
@inject NavigationManager _navigation
@inject NotificationService _notice
@inject IStringLocalizer<Resource> _localizer
<Form Model="@command"
      LabelColSpan="8"
      WrapperColSpan="16">
    <div class="row form-style">
        @if (!string.IsNullOrEmpty(errorMessage.error))
        {
            <Alert Message="@errorMessage.error" Type="@AlertType.Error" />
        }
        <div class="col-12">
            <FormItem Label="@_localizer["دلیل"]">
                <Input @bind-Value="@context.Reason" />
            </FormItem>
        </div>


        <div class="col-12">
            <SingleSelect dataSource="parent"
                          bindValue="@context.ParentId"
                          label="@_localizer["والد"]"
                          placeHolder="@_localizer["انتخاب کنید..."]"
                          OnSetSelected="OnSetSelected" />
        </div>
        <div class="col-12">
            <FormItem Label="@_localizer["گزارش برای آگهی/کاربر"]">
                <SingleSelect dataSource="source"
                              bindValue="@context.ReasonType"
                              label="@_localizer["کاربر/آگهی"]"
                              placeHolder="@_localizer["انتخاب کنید..."]"
                              OnSetSelected="OnSetSelectedType" />
            </FormItem>
        </div>

        <div class="col-12 m-1">
          
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="@Create">
                @_localizer["ثبت"]
                </Button>
       

        </div>

    </div>


</Form>




@code {
    [Parameter]
    public string culture { get; set; }
    [Parameter]
    public EventCallback<bool> StateChangeAfterAction { get; set; }
    ReportReasonModels.CreateReportReason command = new ReportReasonModels.CreateReportReason();
    public RestEception errorMessage= new RestEception();
    public bool error = false;
    #region Single Select
    List<DataType> parent = new List<DataType>();
    protected override async Task OnInitializedAsync()
    {
        var result = await _reportReasonService.GetAll();
        foreach (var item in result)
        {
            parent.Add(new DataType { key = item.Name, value = item.Id });
        }
    }
    protected async Task OnSetSelected(int selected)
    {
        command.ParentId = selected;
    }
    #endregion
    #region Single Select
    List<DataType> source = new List<DataType>
   {
      new DataType { key = "کاربر", value = 0},
      new DataType { key = "آگهی", value = 1},
   };
    protected async Task OnSetSelectedType(int selected)
    {
        command.ReasonType = selected;
    }
    #endregion
    private async Task Create()
    {
        try
        {
            var result = await _reportReasonService.AddEntity(command);
            if (result.StatusCode == HttpStatusCode.OK)
            {

                await _notice.Success(new NotificationConfig
                    {
                        Duration = 1.5,
                        Message = "تبریک",
                        Description = "با موفقیت افزوده شد!",

                    });
                command = new ReportReasonModels.CreateReportReason();
                await StateChangeAfterAction.InvokeAsync();


            }
            else
            {
                error = true;
                var response = result.Content.ReadAsStringAsync();
                errorMessage = Newtonsoft.Json.JsonConvert.DeserializeObject<RestEception>(response.Result);
            }
        }
        catch (Exception err)
        {
            throw err;
        }
    }
}