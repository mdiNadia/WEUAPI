@page "/{culture}/WalletEdit/{id:int}"
@using WEUPanel.Pages.Advertisement;
@inject IWalletService _walletService
@inject NavigationManager _navigation
@inject NotificationService _notice
@inject BaseRequestParameter _baseRequestParameter
@inject IAdveriseService _advertiseService
@inject IStringLocalizer<Resource> _localizer
<div class="goback-btn">
    <Button Danger OnClick="@(()=>{_navigation.NavigateTo(culture+"/Wallets");})">@_localizer["بازگشت به عقب"]</Button>
    <Button Danger OnClick="@(()=>{_navigation.NavigateTo(culture+"/");})">@_localizer["بازگشت به صفحه اصلی"]</Button>
</div>
<br />
<Form Model="@command"
      LabelColSpan="8"
      WrapperColSpan="16">
    <div class="row form-style">
        @if (!string.IsNullOrEmpty(errorMessage.error))
        {
            <Alert Message="@errorMessage.error" Type="@AlertType.Error" />
        }
        <div class="col-sm-12 col-md-4">
            <FormItem Label="@_localizer["نام"]">
                <Input @bind-Value="@context.Name" />
            </FormItem>
        </div>
        <div class="col-sm-12 col-md-4">
            <FormItem Label="@_localizer["فعال باشد؟"]">
                <Switch @bind-Value="@context.IsActive"></Switch>
                <span class="m-1"></span>
            </FormItem>
        </div>
        <div class="col-sm-12 col-md-12">
          
                <TextArea @bind-Value="@context.Description" Placeholder="@_localizer["توضیحات"]"/>
            
        </div>
        <div class="col-12 m-1">
          
                <Button class="ant-btn ant-btn-primary" HtmlType="submit" OnClick="@Edit">
                @_localizer["ثبت"]
                </Button>

                <Button class="ant-btn ant-btn-danger" Type="@ButtonType.Default" HtmlType="cancel" OnClick="()=>StateChangeAfterAction.InvokeAsync(true)">
                @_localizer["انصراف"]
                </Button>
           

        </div>

    </div>


</Form>




@code {
    [Parameter]
    public string culture { get; set; }
    [Parameter]
    public int id { get; set; }
    [Parameter]
    public EventCallback<bool> StateChangeAfterAction { get; set; }
    WalletModels.EditWallet command = new();
    public RestEception errorMessage= new RestEception();
    public bool error = false;
    protected override async Task OnInitializedAsync()
    {
        var model = await _walletService.GetById(id);
        command = model.Data.Adapt<WalletModels.EditWallet>();
    }
    private async Task Edit()
    {
        try
        {
            var result = await _walletService.UpdateEntity(id, command);
            if (result.StatusCode == HttpStatusCode.OK)
            {

                await _notice.Success(new NotificationConfig
                    {
                        Duration = 1.5,
                        Message = "تبریک",
                        Description = "با موفقیت ویرایش شد!",

                    });
                await StateChangeAfterAction.InvokeAsync();
            }
            else
            {
                error = true;
                var response = result.Content.ReadAsStringAsync();
                errorMessage = Newtonsoft.Json.JsonConvert.DeserializeObject<RestEception>(response.Result);
            }
        }
        catch (Exception err)
        {
            throw err;
        }
    }


}