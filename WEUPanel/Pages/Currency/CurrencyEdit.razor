@page "/{culture}/CurrencyEdit/{currency:int}"
@inject ICurrencyService _currencyService
@inject NavigationManager _navigation
@inject NotificationService _notice
@inject BaseRequestParameter _baseRequestParameter
@inject ICountryService _countryservice
@inject IStringLocalizer<Resource> _localizer
<Form Model="@command"
      LabelColSpan="8"
      WrapperColSpan="16"
     >
    <div class="row form-style">
        @if (!string.IsNullOrEmpty(errorMessage.error))
        {
            <Alert Message="@errorMessage.error" Type="@AlertType.Error" />
        }
        <Input @bind-Value="@context.Id" Type="hidden" />
        <div class="col-6 m-1">
            <FormItem Label="@_localizer["نام"]">
                <Input @bind-Value="@context.CurrencyName" />
            </FormItem>
        </div>

        <div class="col-6 m-1">
            <Text>@_localizer["بعنوان واحد پول پیشفرض تنظیم شود؟"]</Text>
            <br />
            <RadioGroup @bind-Value="@context.IsDefault">
                <Radio Value="true">@_localizer["بله"]</Radio>
                <Radio Value="false">@_localizer["خیر"]</Radio>
            </RadioGroup>

        </div>
        <div class="col-12 m-1">

            <Button class="ant-btn ant-btn-primary" HtmlType="submit" OnClick="@Edit">
                @_localizer["ثبت"]
            </Button>

            <Button class="ant-btn ant-btn-danger" Type="@ButtonType.Default" HtmlType="cancel" OnClick="()=>StateChangeAfterAction.InvokeAsync(true)">
                @_localizer["انصراف"]
            </Button>
        </div>
    </div>


</Form>




@code {
    [Parameter]
    public string culture { get; set; }
    [Parameter]
    public int currency { get; set; }
    [Parameter]
    public EventCallback<bool> StateChangeAfterAction { get; set; }
    CurrencyModels.EditCurrency command = new();
    public RestEception errorMessage= new RestEception();
    public bool error = false;


    protected override async Task OnInitializedAsync()
    {
        var model = await _currencyService.GetById(currency);
        command = model.Data.Adapt<CurrencyModels.EditCurrency>();
    }
    private async Task Edit()
    {
        try
        {
            var result = await _currencyService.UpdateEntity(currency, command);
            if (result.StatusCode == HttpStatusCode.OK)
            {
                await _notice.Success(new NotificationConfig
                    {
                        Duration = 1.5,
                        Message = "تبریک",
                        Description = "با موفقیت ویرایش شد!",

                    });
                await StateChangeAfterAction.InvokeAsync();
               
            }
            else
            {
                error = true;
                var response = result.Content.ReadAsStringAsync();
                errorMessage = Newtonsoft.Json.JsonConvert.DeserializeObject<RestEception>(response.Result);
            }
        }
        catch (Exception err)
        {
            throw err;
        }
    }
}
