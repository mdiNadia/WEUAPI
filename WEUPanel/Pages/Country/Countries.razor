@page "/{culture}/Countries"
@using Microsoft.AspNetCore.WebUtilities;
@using Newtonsoft.Json;
@using WEUPanel.Helpers.Pagination
@using WEUPanel.Pages.Currency
@using WEUPanel.Shared.Common;
@inject ICountryService _countryService
@inject NavigationManager _navigation
@inject IMessageService _message
@inject ConfirmService _confirmService
@inject BaseRequestParameter _baseRequestParameter
@inject IStringLocalizer<Resource> _localizer
@inject ModalService _modalService
@inject State state
<div>
    @if (_showEditForm)
    {
        <CountryEdit culture="@culture" id="@id" StateChangeAfterAction="StateChangeAfterAction" />
        _showEditForm = false;
    }
    else
    {
        <CountryCreate culture="@culture" StateChangeAfterAction="StateChangeAfterAction" />
    }

</div>
<br/>
<div>
    <a href="/@culture/Currencies" class="btn bg-warning btn-larg" style="color:white">
        <Icon Type="setting" Theme="outline" Style="margin-bottom:7px" />
        @_localizer["خرید و فروش واحدهای پولی"]
    </a>
</div>
@*<br/>
<div>
    <a href="/@culture/Currencies" class="btn bg-warning btn-larg" style="color:white">
        <Icon Type="setting" Theme="outline" Style="margin-bottom:7px" />
        تنظیمات واحدهای پول
    </a>
</div>*@

<br />
@if (dataTable != null && dataTable?.Count() != 0)
{
    <div class="col-md-12">



        <Table Bordered=@true
           Responsive="true"
           Loading="_loading"
           TItem="CountryModels.Country"
           DataSource="@dataTable"
           HidePagination=@true
           Total="@_total">
            <PropertyColumn Title="@_localizer["شناسه"]" Property="c=>c.Id">
                <a>@context.Id</a>
            </PropertyColumn>
            <PropertyColumn Title="@_localizer["فعال است؟"]" Property="c=>c.IsActive">
                <a>@context.IsActive</a>
            </PropertyColumn>
            <PropertyColumn Title="@_localizer["کد iso"]" Property="c=>c.Iso">
                <a>@context.Iso</a>
            </PropertyColumn>
            <PropertyColumn Title="@_localizer["کد iso3"]" Property="c=>c.Iso3">
                <a>@context.Iso3</a>
            </PropertyColumn>
            <PropertyColumn Title="@_localizer["کشور"]" Property="c=>c.Name">
                <a>@context.Name</a>
            </PropertyColumn>
            <PropertyColumn Title="@_localizer["کدپستی"]" Property="c=>c.NumCode">
                <a>@context.NumCode</a>
            </PropertyColumn>
            <PropertyColumn Title="@_localizer["کدتلفن"]" Property="c=>c.PhoneCode">
                <a>@context.PhoneCode</a>
            </PropertyColumn>
            <PropertyColumn Title="@_localizer["واحد پول"]" Property="c=>c.CurrencyId">
                <a>@context.CurrencyId</a>
            </PropertyColumn>
            <ActionColumn Title="@_localizer["عملیات"]">
                <Space Size=@("middle")>
                    @{
                    if (context.CurrencyId != null && context.CurrencyId != 0)
                        {
                                <Button Class="bg-primary small" OnClick="()=>CurrencySettings((int)context.CurrencyId)">@_localizer["خرید و فروش"]</Button>
                        }
                    }
                    <Button Class="bg-info small m-1" OnClick="()=>CurrencyHandle(context.Id,context.CurrencyId??0)">@_localizer["واحد پول"]</Button>

                    <Button Class="bg-warning small" OnClick="()=>EditData(context.Id)">@_localizer["ویرایش"]</Button>

                    <Button Class="bg-danger small m-1" OnClick="@(async ()=> { await ShowConfirm(ConfirmButtons.YesNo,context.Id); })">@_localizer["حذف"]</Button>
                </Space>
            </ActionColumn>
        </Table>



        <br />

        <div class="d-flex justify-content-between">
            <p>@_localizer["شماره صفحه"]: @_pageIndex | @_localizer["تعداد در هر صفحه"]: @_pageSize | @_localizer["کل اطلاعات"]: @_total</p>
            <div class="prev-next-box">
                <CustomePaging pageNumber=@_pageIndex
                           pageSize=@_pageSize
                           totalPages=@country.TotalPages
                           totalRecords=@country.TotalRecords
                           nextPage=@country.NextPage
                           previousPage=@country.PreviousPage
                           Spread="2"
                           SelectedPage="@SelectedPage" />
            </div>
        </div>

        <br />
    </div>
}
else
{

    <Alert Message="@_localizer["دیتایی وجود ندارد!"]" Type="@AlertType.Info" />


}
<Modal
      Title="@_localizer["ویرایش"]"
       Visible="@_edit"
       OnCancel="HandleCancel"
       DestroyOnClose="true"
Footer="null">
    <CurrencyEdit culture="@culture" currency="newCurrency" StateChangeAfterAction="StateChangeAfterAction"/>
</Modal>
<Modal Title="@_localizer["افزودن"]"
       Visible="@_create"
       OnCancel="HandleCancel"
       DestroyOnClose="true"
       Footer="null">
    <CurrencyCreate culture="@culture" country="newCountry" StateChangeAfterAction="StateChangeAfterAction" />
</Modal>
@code {
    [Parameter]
    public string culture { get; set; }
    public bool _showEditForm = false;
    bool _edit = false;
    bool _create = false;
    public int id;
    protected async Task StateChangeAfterAction()
    {
        _showEditForm = false;
        _edit = false;
        _create = false;
        await OnInitializedAsync();
        StateHasChanged();


    }
    private async Task HandleCancel(MouseEventArgs e)
    {
        await StateChangeAfterAction();
    }
    [Parameter]
    [SupplyParameterFromQuery]
    public string page { get; set; }
    ITable tableRef;
    PagedResponse<IEnumerable<CountryModels.Country>> country;
    IEnumerable<CountryModels.Country> dataTable;
    int _pageIndex = new();
    int _pageSize = new();
    int _total = new();
    bool _loading = false;
    protected override async Task OnInitializedAsync()
    {
        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
        var querystrings = QueryHelpers.ParseQuery(uri.Query);
        if (querystrings.TryGetValue("page", out var page))
        {
            _pageIndex = Convert.ToInt32(page);
        };
        _loading = true;
        country = await _countryService.GetAllByPaging(_pageIndex, 10);
        _loading = false;

        dataTable = country.Data;
        _pageIndex = country.PageNumber;
        _pageSize = country.PageSize;
        _total = country.TotalRecords;
        state.SetPage(_pageIndex.ToString());
    }
    private async Task nextPage()
    {
        _loading = true;
        country = await _countryService.GetAllByPaging((_pageIndex + 1), _pageSize);
        _loading = false;
        dataTable = country.Data;
        _pageIndex = country.PageNumber;
        _pageSize = country.PageSize;
        _total = country.TotalRecords;
        ChangeUrl();
    }
    private async Task prevPage()
    {
        _loading = true;
        country = await _countryService.GetAllByPaging((_pageIndex - 1), _pageSize);
        _loading = false;
        dataTable = country.Data;
        _pageIndex = country.PageNumber;
        _pageSize = country.PageSize;
        _total = country.TotalRecords;
        ChangeUrl();
    }
    private async Task SelectedPage(int page)
    {
        _loading = true;
        country = await _countryService.GetAllByPaging(page, _pageSize);
        _loading = false;
        dataTable = country.Data;
        _pageIndex = country.PageNumber;
        _pageSize = country.PageSize;
        _total = country.TotalRecords;
        ChangeUrl();
    }
    public int newCountry;
    public int newCurrency;
    void CurrencyHandle(int country, int currency)
    {
        newCountry = country;
        newCurrency = currency;
        if (currency != 0)
        {
            _edit = true;
        }
        else
            _create = true;
    }
    void EditData(int id)
    {
        this._showEditForm = true;
        this.id = id;
    }
    void CurrencySettings(int currencyId)
    {
        _navigation.NavigateTo(culture + "/CurrencySettings/" + currencyId);
    }
    public RestEception errorMessage = new RestEception();
    protected async Task DeleteData(int id)
    {
        dataTable = dataTable.Where(c => c.Id != id);
        _total = _total - 1;
        var result = await _countryService.RemoveEntity(id);
        if (result.IsSuccessStatusCode)
        {
            if (!dataTable.Any())
            {
                await prevPage();
                StateHasChanged();
            }
            await _message.Success($"با موفقیت حذف شد", 2);
        }
        else
        {

            string response = result.Content.ReadAsStringAsync().Result;
            errorMessage = Newtonsoft.Json.JsonConvert.DeserializeObject<RestEception>(response);
            _modalService.Error(new ConfirmOptions()
                {
                    Title = "حذف نشد",
                    Content = errorMessage.error
                });
            dataTable = country.Data;
            _total = _total + 1;

        }
    }
    private async Task ShowConfirm(ConfirmButtons confirmButtons, int id)
    {
        var content = "آیا از حذف این داده اطمینان دارید؟ عملیات حذف غیرقابل بازگشت می‌باشد!";
        var title = "اخطارررر";
        var confirmResult = await _confirmService.Show(content, title, confirmButtons);
        if (confirmResult == ConfirmResult.Yes)
            await DeleteData(id);
    }
    private void ChangeUrl()
    {
        string url = UriHelper.RemoveQueryStringByKey(_navigation.Uri, "page");
        var query = new Dictionary<string, string> { { "page", _pageIndex.ToString() } };
        _navigation.NavigateTo(QueryHelpers.AddQueryString(url, query));
    }

}


