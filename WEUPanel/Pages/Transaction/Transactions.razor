@page "/{culture}/Transactions"
@using Microsoft.AspNetCore.WebUtilities;
@using WEUPanel.Helpers.Pagination
@using WEUPanel.Pages.ReportAdsReason;
@inject ITransactionService _transactionService
@inject NavigationManager _navigation
@inject IMessageService _message
@inject ConfirmService _confirmService
@inject IStringLocalizer<Resource> _localizer
@using WEUPanel.Shared.Common
@inject State state
@if (dataTable != null && dataTable?.Count() != 0)
{
            <div class="col-md-12">
            <Table Bordered=@true
           Responsive="true"
           Loading="_loading"
           TItem="TransactionModels.Transaction"
           DataSource="@dataTable"
           HidePagination=@true
           Total="@_total">
            <PropertyColumn Title="@_localizer["شناسه"]" Property="c=>c.Id">
                    <a>@context.Id</a>
                </PropertyColumn>
            <PropertyColumn Title="@_localizer["توضیحات"]" Property="c=>c.Description">
                    <a>@context.Description</a>
                </PropertyColumn>

            <PropertyColumn Title="@_localizer["تاریخ ایجاد"]" Property="c=>c.CreationDate">
                    <a>@context.CreationDate</a>
                </PropertyColumn>

            <PropertyColumn Title="@_localizer["مقدار"]" Property="c=>c.Amount">
                    <a>@context.Amount</a>
                </PropertyColumn>

            <PropertyColumn Title="@_localizer["حذف شده؟"]" Property="c=>c.IsDeleted">
                    <a>@context.IsDeleted</a>
                </PropertyColumn>

                <PropertyColumn Title="@_localizer["متعلق به کیف پول"]" Property="c=>c.Wallet.Name">
                    <a>@context.Wallet.Name</a>
                </PropertyColumn>
            <PropertyColumn Title="@_localizer["نوع تراکنش"]" Property="c=>c.TransactionType.Name">
                    <a>@context.TransactionType.Name</a>
                </PropertyColumn>

            <ActionColumn Title="@_localizer["عملیات"]">
                    <Space Size=@("middle")>
                     
                        <Button Class="bg-warning small m-1" OnClick="()=>WalletTransactions(context.Wallet.Id)">@_localizer["دیدن تمام تراکنش‌های این کیف پول"]</Button>
                    </Space>
                </ActionColumn>

            </Table>



            <br />

            <div class="d-flex justify-content-between">
            <p>@_localizer["شماره صفحه"]: @_pageIndex | @_localizer["تعداد در هر صفحه"]: @_pageSize | @_localizer["کل اطلاعات"]: @_total</p>
            <div class="prev-next-box">
                    <CustomePaging pageNumber=@_pageIndex
                           pageSize=@_pageSize
                           totalPages=@reportReason.TotalPages
                           totalRecords=@reportReason.TotalRecords
                           nextPage=@reportReason.NextPage
                           previousPage=@reportReason.PreviousPage
                           Spread="2"
                           SelectedPage="@SelectedPage" />

                </div>
            </div>

            <br />
        </div>

    
}
else
{
    <Alert Message="@_localizer["دیتایی وجود ندارد!"]" Type="@AlertType.Info" />

}

@code {
    [Parameter]
    public string culture { get; set; }



    ITable tableRef;
    PagedResponse<IEnumerable<TransactionModels.Transaction>> reportReason;
    IEnumerable<TransactionModels.Transaction> dataTable;
    int _pageIndex = new();
    int _pageSize = new();
    int _total = new();
    bool _loading = false;
    [Parameter]
    [SupplyParameterFromQuery]
    public string page { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
        var querystrings = QueryHelpers.ParseQuery(uri.Query);
        if (querystrings.TryGetValue("page", out var page))
        {
            _pageIndex = Convert.ToInt32(page);
        };
        _loading = true;
        reportReason = await _transactionService.GetAllByPaging(_pageIndex, 10);
        _loading = false;

        dataTable = reportReason.Data;
        _pageIndex = reportReason.PageNumber;
        _pageSize = reportReason.PageSize;
        _total = reportReason.TotalRecords;
        state.SetPage(_pageIndex.ToString());
    }
    private async Task nextPage()
    {
        _loading = true;
        reportReason = await _transactionService.GetAllByPaging((_pageIndex + 1), _pageSize);
        _loading = false;
        dataTable = reportReason.Data;
        _pageIndex = reportReason.PageNumber;
        _pageSize = reportReason.PageSize;
        _total = reportReason.TotalRecords;
        ChangeUrl();
    }
    private async Task prevPage()
    {
        _loading = true;
        reportReason = await _transactionService.GetAllByPaging((_pageIndex - 1), _pageSize);
        _loading = false;
        dataTable = reportReason.Data;
        _pageIndex = reportReason.PageNumber;
        _pageSize = reportReason.PageSize;
        _total = reportReason.TotalRecords;
        ChangeUrl();
    }
    private async Task SelectedPage(int page)
    {
        _loading = true;
        reportReason = await _transactionService.GetAllByPaging(page, _pageSize);
        _loading = false;
        dataTable = reportReason.Data;
        _pageIndex = reportReason.PageNumber;
        _pageSize = reportReason.PageSize;
        _total = reportReason.TotalRecords;
        ChangeUrl();
    }
    void WalletTransactions(int id)
    {
        _navigation.NavigateTo(culture + "/WalletTransactions/" + id);
    }
    private void ChangeUrl()
    {
        string url = UriHelper.RemoveQueryStringByKey(_navigation.Uri, "page");
        var query = new Dictionary<string, string> { { "page", _pageIndex.ToString() } };
        _navigation.NavigateTo(QueryHelpers.AddQueryString(url, query));
    }
}


